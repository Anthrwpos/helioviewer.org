HelioViewer ChangeLog

03/13/2008
Version: alpha
By: Keith Hughitt (hughitt1@grace.nascom.nasa.gov)

1. Set index.html to only include only the necessary Scriptaculous
   components (improves performance).

2. Renamed main driver function in index.html from "initializeGraphic" to "main"

3. Moved event listener for "About" button from inline attribute to SunViewer class
   (less obtrusive).
   
4. Using prototype 1.6's custom "dom:loaded" event instead of document.onload:
   this makes it so that behavior can be initiated once the DOM has been loaded,
   before all assets (images, etc) have finished loaded. This also avoids to problem
   of Opera triggering the onLoad event twice so the "if (sunviewer = null)" check
   has been removed as well.

5. Began replacing custom event-handling code (SunViewerWidget methods) YUI Custom events.
   The YUI Custom event model [1] allows for the creation of custom events associated with
   non-DOM code. The new syntax for creating an event is:
   
   		document.customEventName = new YAHOO.util.CustomEvent("customEventName");
   		
   Once you have a custom event, you can then subscribe and fire it using:
   
   		document.customEventName.subscribe(fn callback, obj associatedObj, boolean scope);
   		document.customEventName.fire(arg1, arg2, ...); 
   		
   Arguments passed to fire are then accessed via an array, which is the second argument
   that should be specified in the callback function.
   
   For example, the old way of registering and responding to the Zoom event
   was:
   
   	this.observe(imageLayerProvider.tileContainer.viewport, 'Zoom');
   	this.notifyListeners('Zoom', level, source);
   
   When the up button was clicked, the SunViewerWidget functionality would cause
   "onExchange" to be called. Using YUI's custom events, the syntax is:
   
     document.zoomLevelChange.subscribe(this.onZoomLevelChange, this, true);
     document.zoomLevelChange.fire(level);
     
   Finally, callback functions should be setup with a minimal of two arguments: the
   event type and arguments. e.g.
   
   onZoomLevelChange: function(type, args) {
	    var newZoomLevel = args[0];
	    ...
   }
   
   Although the syntax may initially appear more complex, there are several advantages
   to using this style for handling events:
   
   (1) Using the older syntax you had to pass in the widget you want to watch (e.g.
       "layerProvider" in this.observe(layerProvider ...)) Using custom events, you
       can simply have a different event for each firing widget: layerProvidersExchange,
       rowsExchange, etc. This makes setting up and looking for the right event much easier.
       
   (2) All events can be associated with a single object (in this case document). In the
       old style, event handling code is dispersed throughout various objects, and there
       is no central location to check for the existence of a given event handler. By attaching
       all the event handling code to the document object, this makes it more centralized and
       easy to manage.
       
   (3) In the old system, a superclass, SunViewerWidget, was created which contained all
	   of the event-handling code and was inherited by all objects which needed to deal
	   with events. Using YUI's custom events eliminates the need for this class and
	   thus greatly simplifies the system architecture and overhead.
	   
   In essence, the problem with the old event-handling system is that the different components
   are too dependent on one another, and a large part of this was due to the fact that they needed
   to be able to see each other directly (via references passed in). By communicating instead through
   events, the separate components can remain separate and instead only listen for events/fire events
   relevant to them.
	   
   Note: Several other event-handling frameworks were considered for this task including that of
   Prototype and jQuery. In the end I chose to use YUI's because of it's simplicity, and also for the
   fact that the newly included calendar widget (see item number 8 below) required the YUI event-handling libraries,
   so the code was already available.
	   
6. Continued to separate classes into individual files: split tiles.js and layers.js into multiple
   files for ease of maintenance. To optimize end-product a make or Ant file can be used to automatically
   concatenate, minify, and gzip all of the classes. This way it will not matter how many files are
   maintained during development.
   
7. Replaced custom ZoomLevelSlider with a much simpler extended version of the scriptaculous slider [2].
   It is currently not linked to the zooming functionality, however, because of the way it has been
   designed, it is extremely easy to link the slider to any desired functionality.
  
8. Added a YUI calendar navigation tool [3]. Again, it has not yet been linked to the functionality,
   but has been otherwise prepared to be hooked easily in to the system.

For more information, see:
    [1] http://developer.yahoo.com/yui/event/
    [2] http://wiki.script.aculo.us/scriptaculous/show/Slider
    [3] http://developer.yahoo.com/yui/calendar/


02/20/2008
Version: alpha
By: Keith Hughitt (hughitt1@grace.nascom.nasa.gov)

1. Implemented partial support for Internet Explorer (IE). There are still some issues
   however with UI components including the loading indicator and SelectByDateMenu.
   See item #3 for more details on changes made.

2. FIXED Bug #193280 "Page reload (caching) fails for Opera and IE"
	An issue with using the onload event in conjunction with an image element, and
	Opera / IE's caching mechanism prevent tiles from properly loading after a
	page reload. A solution to this problem involved setting the src of the
	image after the event handlers have been defined and attached. (See links
	#3 and #4 under the "more information" section at the bottom).
	
3. Changed syntax relating to element creation to make better use of Prototype's
	Element class functionality. This is related to item #1 since supporting IE
	requires manually extending all Elements to support Prototype's Element class
	methods (this occurs automatically in Firefox, Safari and Opera). All instances
	of document.createElement() and *.getElementByXXX were replaced to use the newer
	syntax.
	
	For example:
	
		var htmlElement = document.createElement('span');
		htmlElement.className = 'selectByDateMenu';
		
	was replaced with:
	
		var htmlElement = new Element('span', {'class': 'selectByDateMenu'});
		
	(Alternatively, it would also suffice to wrap the document.createElement(..)
	statement with prototype's $() function, however the syntax of the later
	is  much cleaner and more concise.)
	
4. Changed SunImage's tileDir member variable initialization 
   (in SelectByDateMenu.js) from absolute to relative path structure. This
   prevents a bug from occurring when domain name is different from what
   is expected, e.g. when working on a local development server.)
   
5. Changed size of layer menu from 680px to 700px to eliminate overflow issues.

6. Fixed spelling error for array name in LayerManager.js ("Colums" -> "Columns")
   
   
For more information, see:
	[1] http://www.prototypejs.org/learn/extensions
	[2] http://www.prototypejs.org/api/element
	[3] http://forum.mootools.net/topic.php?id=4678
	[4] http://www.thefutureoftheweb.com/blog/image-onload-isnt-being-called

02/13/2008
Version: alpha
By: Keith Hughitt (hughitt1@grace.nascom.nasa.gov)

1. Upgraded to Prototype 1.6.0.2 / script.aculo.us 1.8.1 (from prototype 1.5.1/
   script.aculo.us 1.7.1_beta3). Newer versions include better OO support, 
   security fixes, ie bug fixes and better performance. The new libraries 
   are NOT however backwards compatable, and several changes were necessary 
   for HelioViewer (HV) to work properly with the newer libraries:
	  	* In prototype 1.6, Hashes require the use of accessors and mutators 
	  	  instead of simply using dot or bracket access. A simple solution 
	  	  however was to use the Hash#toObject() method to convert all hashes
	  	  to Objects before using them to extend any classes. (HV uses a
	  	  "defaultOptions" hash for many classes in order to pass some default
	  	  parameters to the class constructor.)
	  	* getElementsByClassName is deprecated in 1.6, so instances of it
	  	  were switched for either select(), or, in cases where only the 
	  	  first element was needed, down().
	  	* Position#cumulativeOffset is deprecated: switched all instances to 
	  	  use Element#cumulativeOffset.

2. Removed redundant class definition for ZoomLevelSlider. ZoomLevelSlider.js
   contained two identical copies of the class definition for ZoomLevelSlider.
   One of the copies was removed from the file.
   
3. Disabled the debugging console output Textarea. With Firebug installed,
   all messages sent to Debug will output to the Firebug console, thus removing
   the necessity to have a separate error console. It can be re-enabled easily
   by simply uncommenting the relevant code in index.html.
   
For more information see:
	[1] http://www.prototypejs.org/2007/11/7/prototype-1-6-0-script-aculo-us-1-8-0-and-the-bungee-book-now-available
	[2] http://dev.rubyonrails.org/browser/spinoffs/prototype/tags/rel_1-6-0/CHANGELOG
	[3] http://prototypejs.org/2008/2/12/deprecation-js-easing-the-1-5-1-6-transition
	[4] http://mislav.caboo.se/js/upgrading-to-prototype-1-6-real-world-examples/

===============================================================================
ChangeLog started on 02/13/2008. For information on efforts prior to this see
readme.txt file, and any comments in the code.

-Keith 
[keith.hughitt@gmail.com]
===============================================================================